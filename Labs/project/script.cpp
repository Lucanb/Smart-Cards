#include <iostream>
#include <vector>
#include <sstream>
#include <string>
#include <algorithm>

int main() {
    std::string command = R"(// Select the installer applet
0x00 0xA4 0x04 0x00 0x09 0xA0 0x00 0x00 0x00 0x62 0x03 0x01 0x08 0x01 0x7F;
0x80 0xB0 0x00 0x00 0x00 0x7F;

// health/javacard/Header.cap
0x80 0xB2 0x01 0x00 0x00 0x7F;
0x80 0xB4 0x01 0x00 0x17 0x01 0x00 0x14 0xDE 0xCA 0xFF 0xED 0x03 0x02 0x05 0x00 0x01 0x09 0xA0 0x00 0x00 0x00 0x63 0x03 0x01 0x0C 0x06 0x00 0x7F;
0x80 0xBC 0x01 0x00 0x00 0x7F;

// health/javacard/Directory.cap
0x80 0xB2 0x02 0x00 0x00 0x7F;
0x80 0xB4 0x02 0x00 0x20 0x02 0x00 0x25 0x00 0x14 0x00 0x25 0x00 0x0D 0x00 0x15 0x00 0xB2 0x00 0x35 0x06 0x3C 0x00 0x1C 0x00 0xB3 0x00 0x00 0x01 0xD6 0x0F 0x89 0x00 0x00 0x00 0x00 0x00 0x7F;
0x80 0xB4 0x02 0x00 0x08 0x04 0x00 0x02 0x00 0x0C 0x02 0x01 0x00 0x7F;
0x80 0xBC 0x02 0x00 0x00 0x7F;

// health/javacard/Import.cap
0x80 0xB2 0x04 0x00 0x00 0x7F;
0x80 0xB4 0x04 0x00 0x18 0x04 0x00 0x15 0x02 0x00 0x01 0x07 0xA0 0x00 0x00 0x00 0x62 0x00 0x01 0x08 0x01 0x07 0xA0 0x00 0x00 0x00 0x62 0x01 0x01 0x7F;
0x80 0xBC 0x04 0x00 0x00 0x7F;

// health/javacard/Applet.cap
0x80 0xB2 0x03 0x00 0x00 0x7F;
0x80 0xB4 0x03 0x00 0x10 0x03 0x00 0x0D 0x01 0x09 0xA0 0x00 0x00 0x00 0x63 0x03 0x01 0x0C 0x07 0x00 0xD2 0x7F;
0x80 0xBC 0x03 0x00 0x00 0x7F;

// health/javacard/Class.cap
0x80 0xB2 0x06 0x00 0x00 0x7F;
0x80 0xB4 0x06 0x00 0x20 0x06 0x00 0x35 0x00 0x00 0x00 0x80 0x00 0x04 0x02 0x02 0x01 0x00 0x00 0x00 0x00 0x01 0x00 0x81 0x03 0x0B 0x00 0x05 0x04 0x04 0x00 0x00 0x00 0xEB 0xFF 0xFF 0x00 0x7F;
0x80 0xB4 0x06 0x00 0x18 0xDE 0x00 0xF3 0x00 0x01 0x02 0x03 0x04 0x05 0x06 0x07 0x08 0x00 0x80 0x00 0x00 0xFF 0x00 0x01 0x00 0x00 0x00 0x00 0x01 0x7F;
0x80 0xBC 0x06 0x00 0x00 0x7F;

// health/javacard/Method.cap
0x80 0xB2 0x07 0x00 0x00 0x7F;
0x80 0xB4 0x07 0x00 0x20 0x07 0x06 0x3C 0x00 0x02 0x20 0x19 0xB5 0x00 0x18 0x8C 0x00 0x10 0x18 0x06 0x90 0x0C 0x87 0x01 0x03 0xB7 0x02 0x03 0xB7 0x03 0x7A 0x04 0x31 0x19 0xB5 0x00 0x18 0x7F;
0x80 0xB4 0x07 0x00 0x20 0x8C 0x00 0x10 0x18 0x06 0x90 0x0C 0x87 0x01 0x03 0xB7 0x02 0x03 0xB7 0x03 0x03 0x32 0x70 0x0E 0xAD 0x01 0x1F 0x1A 0x83 0x01 0x1F 0x26 0x39 0x59 0x03 0x01 0x1F 0x7F;
0x80 0xB4 0x07 0x00 0x20 0x06 0x6C 0xF2 0x18 0x1A 0x85 0x02 0x89 0x02 0x18 0x1A 0x85 0x03 0x89 0x03 0x7A 0x05 0x43 0x18 0x8C 0x00 0x13 0x18 0x06 0x90 0x0C 0x87 0x04 0x03 0xB7 0x05 0x03 0x7F;
0x80 0xB4 0x07 0x00 0x20 0xB7 0x06 0x03 0xB7 0x07 0x03 0xB7 0x08 0x03 0xB7 0x09 0x18 0x06 0x91 0x00 0x0F 0x87 0x0A 0x18 0x06 0x90 0x0C 0x87 0x0B 0x18 0x06 0x90 0x0C 0x87 0x0C 0x03 0xB7 0x7F;
0x80 0xB4 0x07 0x00 0x20 0x0D 0x03 0xB7 0x0E 0x03 0xB7 0x0F 0x18 0x7B 0x19 0xD0 0x00 0x18 0x9B 0x00 0x03 0x7C 0x02 0x22 0x8A 0x01 0x02 0x22 0x8A 0x02 0x02 0x22 0x8A 0x03 0x7F;
0x80 0xBC 0x07 0x00 0x00 0x7F;

// health/javacard/StaticField.cap
0x80 0xB2 0x08 0x00 0x00 0x7F;
0x80 0xB4 0x08 0x00 0x10 0x08 0x00 0x03 0x01 0x09 0xA0 0x00 0x00 0x00 0x63 0x03 0x01 0x0C 0x08 0x7F;
0x80 0xBC 0x08 0x00 0x00 0x7F;

// health/javacard/ReferenceLocation.cap
0x80 0xB2 0x09 0x00 0x00 0x7F;
0x80 0xB4 0x09 0x00 0x10 0x09 0x00 0x0D 0x01 0x09 0xA0 0x00 0x00 0x00 0x63 0x03 0x01 0x0C 0x09 0x7F;
0x80 0xBC 0x09 0x00 0x00 0x7F;

// health/javacard/Export.cap
0x80 0xB2 0x0A 0x00 0x00 0x7F;
0x80 0xB4 0x0A 0x00 0x18 0x0A 0x00 0x14 0xDE 0xCA 0xFF 0xED 0x03 0x02 0x05 0x00 0x01 0x09 0xA0 0x00 0x00 0x00 0x63 0x03 0x01 0x0C 0x0A 0x00 0x7F;
0x80 0xBC 0x0A 0x00 0x00 0x7F;)";
    
    std::vector<std::vector<uint8_t>> apdu_commands;
    
    std::istringstream command_stream(command);
    std::string line;
    while (std::getline(command_stream, line)) {
        if (line.find("//") != std::string::npos) {
            continue;
        }
        if (line.empty()) {
            continue;
        }
        line.erase(remove(line.begin(), line.end(), ';'), line.end());
        
        std::istringstream line_stream(line);
        std::string byte_str;
        std::vector<uint8_t> apdu_line;
        
        while (line_stream >> byte_str) {
            if (byte_str.substr(0, 2) == "0x") {
                uint8_t byte_value = static_cast<uint8_t>(std::stoi(byte_str, nullptr, 16));
                apdu_line.push_back(byte_value);
            }
        }
        apdu_commands.push_back(apdu_line);
    }
    
    // Output the APDU commands in the C++ format
    std::cout << "std::vector<std::vector<uint8_t>> apdu_commands = {\n";
    for (const auto& command : apdu_commands) {
        std::cout << "    {";
        for (size_t i = 0; i < command.size(); ++i) {
            std::cout << "0x" << std::hex << static_cast<int>(command[i]);
            if (i != command.size() - 1) {
                std::cout << ", ";
            }
        }
        std::cout << "},\n";
    }
    std::cout << "};\n";
    
    return 0;
}
